// generated from rosidl_adapter/resource/msg.idl.em
// with input from rmf_lift_msgs/msg/LiftState.msg
// generated code does not contain a copyright notice

#include "builtin_interfaces/msg/Time.idl"

module rmf_lift_msgs {
  module msg {
    module LiftState_Constants {
      const uint8 DOOR_CLOSED = 0;
      const uint8 DOOR_MOVING = 1;
      const uint8 DOOR_OPEN = 2;
      const uint8 MOTION_STOPPED = 0;
      const uint8 MOTION_UP = 1;
      const uint8 MOTION_DOWN = 2;
      const uint8 MOTION_UNKNOWN = 3;
      const uint8 MODE_UNKNOWN = 0;
      const uint8 MODE_HUMAN = 1;
      const uint8 MODE_AGV = 2;
      const uint8 MODE_FIRE = 3;
      const uint8 MODE_OFFLINE = 4;
      const uint8 MODE_EMERGENCY = 5;
    };
    @verbatim (language="comment", text=
      "lift_time records when the information in this message was generated")
    struct LiftState {
      builtin_interfaces::msg::Time lift_time;

      string lift_name;

      sequence<string> available_floors;

      string current_floor;

      string destination_floor;

      uint8 door_state;

      uint8 motion_state;

      @verbatim (language="comment", text=
        "We can only set human or agv mode, but we can read other modes: fire, etc.")
      sequence<uint8> available_modes;

      uint8 current_mode;

      @verbatim (language="comment", text=
        "we can add more \"read-only\" modes as we come across more of them." "\n"
        "this field records the session_id that has been granted control of the lift" "\n"
        "until it sends a request with a request_type of REQUEST_END_SESSION")
      string session_id;
    };
  };
};
