/*
 * This file is automatically generated by the build system of 
 *
 * Automatically generated files do not have a copyright
 */

#ifndef RMF_TASK_SEQUENCE__SCHEMAS__BACKUP_PHASESEQUENCETASK_V0_1
#define RMF_TASK_SEQUENCE__SCHEMAS__BACKUP_PHASESEQUENCETASK_V0_1

#include <nlohmann/json.hpp>

namespace rmf_task_sequence {
namespace schemas {

static const nlohmann::json backup_PhaseSequenceTask_v0_1 =
R"raw_schema(
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://open-rmf.org/rmf_task_sequence/backup_PhaseSequenceTask/0.1",
  "title": "Phase Sequence Task Backup",
  "description": "A backup state for a task which is defined by a fixed sequence of phases",
  "oneOf": [
    {
      "properties": {
        "schema_version": {
          "description": "The version of the Phase Sequence Task Backup schema being used",
          "type": "integer",
          "enum": [1]
        },
        "current_phase": {
          "description": "The current phase of the task when the backup occurred",
          "properties": {
            "id": {
              "description": "The integer ID of the phase",
              "type": "integer",
              "minimum": 0
            },
            "cancelled_from": {
              "description": "The integer ID of the phase that was cancelled to reach the current phase",
              "type": "integer",
              "minimum": 0
            },
            "state": {
              "description": "The serialized state of the backed up current phase"
            }
          },
          "required": [ "id", "state" ]
        },
        "skip_phases": {
          "description": "A list of pending phases that are supposed to be skipped",
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "required": [ "schema_version", "current_phase" ]
    },
    {
      "properties": {
        "schema_version": {
          "description": "The version of the Phase Sequence Task Backup schema being used",
          "type": "integer",
          "enum": [1]
        },
        "finished": {
          "description": "True if the task is finished, or false if the task has not started",
          "type": "boolean"
        }
      },
      "required": [ "schema_version", "finished" ]
    }
  ]
}
)raw_schema"_json;

} // namespace schemas
} // namespace rmf_task_sequence

#endif // RMF_TASK_SEQUENCE__SCHEMAS__BACKUP_PHASESEQUENCETASK_V0_1
