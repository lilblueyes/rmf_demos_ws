# generated from rosidl_generator_py/resource/_idl.py.em
# with input from rmf_traffic_msgs:msg/ScheduleParticipantPatch.idl
# generated code does not contain a copyright notice

# This is being done at the module level and not on the instance level to avoid looking
# for the same variable multiple times on each instance. This variable is not supposed to
# change during runtime so it makes sense to only look for it once.
from os import getenv

ros_python_check_fields = getenv('ROS_PYTHON_CHECK_FIELDS', default='')


# Import statements for member types

# Member 'erasures'
import array  # noqa: E402, I100

import builtins  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_ScheduleParticipantPatch(type):
    """Metaclass of message 'ScheduleParticipantPatch'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('rmf_traffic_msgs')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'rmf_traffic_msgs.msg.ScheduleParticipantPatch')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__schedule_participant_patch
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__schedule_participant_patch
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__schedule_participant_patch
            cls._TYPE_SUPPORT = module.type_support_msg__msg__schedule_participant_patch
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__schedule_participant_patch

            from rmf_traffic_msgs.msg import ScheduleChangeAdd
            if ScheduleChangeAdd.__class__._TYPE_SUPPORT is None:
                ScheduleChangeAdd.__class__.__import_type_support__()

            from rmf_traffic_msgs.msg import ScheduleChangeDelay
            if ScheduleChangeDelay.__class__._TYPE_SUPPORT is None:
                ScheduleChangeDelay.__class__.__import_type_support__()

            from rmf_traffic_msgs.msg import ScheduleChangeProgress
            if ScheduleChangeProgress.__class__._TYPE_SUPPORT is None:
                ScheduleChangeProgress.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class ScheduleParticipantPatch(metaclass=Metaclass_ScheduleParticipantPatch):
    """Message class 'ScheduleParticipantPatch'."""

    __slots__ = [
        '_participant_id',
        '_itinerary_version',
        '_erasures',
        '_delays',
        '_additions',
        '_progress',
        '_check_fields',
    ]

    _fields_and_field_types = {
        'participant_id': 'uint64',
        'itinerary_version': 'uint64',
        'erasures': 'sequence<uint64>',
        'delays': 'sequence<rmf_traffic_msgs/ScheduleChangeDelay>',
        'additions': 'rmf_traffic_msgs/ScheduleChangeAdd',
        'progress': 'rmf_traffic_msgs/ScheduleChangeProgress',
    }

    # This attribute is used to store an rosidl_parser.definition variable
    # related to the data type of each of the components the message.
    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('uint64'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint64'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint64')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['rmf_traffic_msgs', 'msg'], 'ScheduleChangeDelay')),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['rmf_traffic_msgs', 'msg'], 'ScheduleChangeAdd'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['rmf_traffic_msgs', 'msg'], 'ScheduleChangeProgress'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        if 'check_fields' in kwargs:
            self._check_fields = kwargs['check_fields']
        else:
            self._check_fields = ros_python_check_fields == '1'
        if self._check_fields:
            assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
                'Invalid arguments passed to constructor: %s' % \
                ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.participant_id = kwargs.get('participant_id', int())
        self.itinerary_version = kwargs.get('itinerary_version', int())
        self.erasures = array.array('Q', kwargs.get('erasures', []))
        self.delays = kwargs.get('delays', [])
        from rmf_traffic_msgs.msg import ScheduleChangeAdd
        self.additions = kwargs.get('additions', ScheduleChangeAdd())
        from rmf_traffic_msgs.msg import ScheduleChangeProgress
        self.progress = kwargs.get('progress', ScheduleChangeProgress())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.get_fields_and_field_types().keys(), self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    if self._check_fields:
                        assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.participant_id != other.participant_id:
            return False
        if self.itinerary_version != other.itinerary_version:
            return False
        if self.erasures != other.erasures:
            return False
        if self.delays != other.delays:
            return False
        if self.additions != other.additions:
            return False
        if self.progress != other.progress:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @builtins.property
    def participant_id(self):
        """Message field 'participant_id'."""
        return self._participant_id

    @participant_id.setter
    def participant_id(self, value):
        if self._check_fields:
            assert \
                isinstance(value, int), \
                "The 'participant_id' field must be of type 'int'"
            assert value >= 0 and value < 18446744073709551616, \
                "The 'participant_id' field must be an unsigned integer in [0, 18446744073709551615]"
        self._participant_id = value

    @builtins.property
    def itinerary_version(self):
        """Message field 'itinerary_version'."""
        return self._itinerary_version

    @itinerary_version.setter
    def itinerary_version(self, value):
        if self._check_fields:
            assert \
                isinstance(value, int), \
                "The 'itinerary_version' field must be of type 'int'"
            assert value >= 0 and value < 18446744073709551616, \
                "The 'itinerary_version' field must be an unsigned integer in [0, 18446744073709551615]"
        self._itinerary_version = value

    @builtins.property
    def erasures(self):
        """Message field 'erasures'."""
        return self._erasures

    @erasures.setter
    def erasures(self, value):
        if self._check_fields:
            if isinstance(value, array.array):
                assert value.typecode == 'Q', \
                    "The 'erasures' array.array() must have the type code of 'Q'"
                self._erasures = value
                return
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 18446744073709551616 for val in value)), \
                "The 'erasures' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 18446744073709551615]"
        self._erasures = array.array('Q', value)

    @builtins.property
    def delays(self):
        """Message field 'delays'."""
        return self._delays

    @delays.setter
    def delays(self, value):
        if self._check_fields:
            from rmf_traffic_msgs.msg import ScheduleChangeDelay
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, ScheduleChangeDelay) for v in value) and
                 True), \
                "The 'delays' field must be a set or sequence and each value of type 'ScheduleChangeDelay'"
        self._delays = value

    @builtins.property
    def additions(self):
        """Message field 'additions'."""
        return self._additions

    @additions.setter
    def additions(self, value):
        if self._check_fields:
            from rmf_traffic_msgs.msg import ScheduleChangeAdd
            assert \
                isinstance(value, ScheduleChangeAdd), \
                "The 'additions' field must be a sub message of type 'ScheduleChangeAdd'"
        self._additions = value

    @builtins.property
    def progress(self):
        """Message field 'progress'."""
        return self._progress

    @progress.setter
    def progress(self, value):
        if self._check_fields:
            from rmf_traffic_msgs.msg import ScheduleChangeProgress
            assert \
                isinstance(value, ScheduleChangeProgress), \
                "The 'progress' field must be a sub message of type 'ScheduleChangeProgress'"
        self._progress = value
