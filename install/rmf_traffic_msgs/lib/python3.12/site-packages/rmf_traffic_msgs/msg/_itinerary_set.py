# generated from rosidl_generator_py/resource/_idl.py.em
# with input from rmf_traffic_msgs:msg/ItinerarySet.idl
# generated code does not contain a copyright notice

# This is being done at the module level and not on the instance level to avoid looking
# for the same variable multiple times on each instance. This variable is not supposed to
# change during runtime so it makes sense to only look for it once.
from os import getenv

ros_python_check_fields = getenv('ROS_PYTHON_CHECK_FIELDS', default='')


# Import statements for member types

import builtins  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_ItinerarySet(type):
    """Metaclass of message 'ItinerarySet'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('rmf_traffic_msgs')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'rmf_traffic_msgs.msg.ItinerarySet')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__itinerary_set
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__itinerary_set
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__itinerary_set
            cls._TYPE_SUPPORT = module.type_support_msg__msg__itinerary_set
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__itinerary_set

            from rmf_traffic_msgs.msg import Route
            if Route.__class__._TYPE_SUPPORT is None:
                Route.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class ItinerarySet(metaclass=Metaclass_ItinerarySet):
    """Message class 'ItinerarySet'."""

    __slots__ = [
        '_participant',
        '_plan',
        '_itinerary',
        '_storage_base',
        '_itinerary_version',
        '_check_fields',
    ]

    _fields_and_field_types = {
        'participant': 'uint64',
        'plan': 'uint64',
        'itinerary': 'sequence<rmf_traffic_msgs/Route>',
        'storage_base': 'uint64',
        'itinerary_version': 'uint64',
    }

    # This attribute is used to store an rosidl_parser.definition variable
    # related to the data type of each of the components the message.
    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('uint64'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint64'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['rmf_traffic_msgs', 'msg'], 'Route')),  # noqa: E501
        rosidl_parser.definition.BasicType('uint64'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint64'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        if 'check_fields' in kwargs:
            self._check_fields = kwargs['check_fields']
        else:
            self._check_fields = ros_python_check_fields == '1'
        if self._check_fields:
            assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
                'Invalid arguments passed to constructor: %s' % \
                ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.participant = kwargs.get('participant', int())
        self.plan = kwargs.get('plan', int())
        self.itinerary = kwargs.get('itinerary', [])
        self.storage_base = kwargs.get('storage_base', int())
        self.itinerary_version = kwargs.get('itinerary_version', int())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.get_fields_and_field_types().keys(), self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    if self._check_fields:
                        assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.participant != other.participant:
            return False
        if self.plan != other.plan:
            return False
        if self.itinerary != other.itinerary:
            return False
        if self.storage_base != other.storage_base:
            return False
        if self.itinerary_version != other.itinerary_version:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @builtins.property
    def participant(self):
        """Message field 'participant'."""
        return self._participant

    @participant.setter
    def participant(self, value):
        if self._check_fields:
            assert \
                isinstance(value, int), \
                "The 'participant' field must be of type 'int'"
            assert value >= 0 and value < 18446744073709551616, \
                "The 'participant' field must be an unsigned integer in [0, 18446744073709551615]"
        self._participant = value

    @builtins.property
    def plan(self):
        """Message field 'plan'."""
        return self._plan

    @plan.setter
    def plan(self, value):
        if self._check_fields:
            assert \
                isinstance(value, int), \
                "The 'plan' field must be of type 'int'"
            assert value >= 0 and value < 18446744073709551616, \
                "The 'plan' field must be an unsigned integer in [0, 18446744073709551615]"
        self._plan = value

    @builtins.property
    def itinerary(self):
        """Message field 'itinerary'."""
        return self._itinerary

    @itinerary.setter
    def itinerary(self, value):
        if self._check_fields:
            from rmf_traffic_msgs.msg import Route
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, Route) for v in value) and
                 True), \
                "The 'itinerary' field must be a set or sequence and each value of type 'Route'"
        self._itinerary = value

    @builtins.property
    def storage_base(self):
        """Message field 'storage_base'."""
        return self._storage_base

    @storage_base.setter
    def storage_base(self, value):
        if self._check_fields:
            assert \
                isinstance(value, int), \
                "The 'storage_base' field must be of type 'int'"
            assert value >= 0 and value < 18446744073709551616, \
                "The 'storage_base' field must be an unsigned integer in [0, 18446744073709551615]"
        self._storage_base = value

    @builtins.property
    def itinerary_version(self):
        """Message field 'itinerary_version'."""
        return self._itinerary_version

    @itinerary_version.setter
    def itinerary_version(self, value):
        if self._check_fields:
            assert \
                isinstance(value, int), \
                "The 'itinerary_version' field must be of type 'int'"
            assert value >= 0 and value < 18446744073709551616, \
                "The 'itinerary_version' field must be an unsigned integer in [0, 18446744073709551615]"
        self._itinerary_version = value
