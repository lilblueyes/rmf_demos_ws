# generated from rosidl_generator_py/resource/_idl.py.em
# with input from rmf_reservation_msgs:msg/FlexibleTimeReservationAlt.idl
# generated code does not contain a copyright notice

# This is being done at the module level and not on the instance level to avoid looking
# for the same variable multiple times on each instance. This variable is not supposed to
# change during runtime so it makes sense to only look for it once.
from os import getenv

ros_python_check_fields = getenv('ROS_PYTHON_CHECK_FIELDS', default='')


# Import statements for member types

import builtins  # noqa: E402, I100

import math  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_FlexibleTimeReservationAlt(type):
    """Metaclass of message 'FlexibleTimeReservationAlt'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('rmf_reservation_msgs')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'rmf_reservation_msgs.msg.FlexibleTimeReservationAlt')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__flexible_time_reservation_alt
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__flexible_time_reservation_alt
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__flexible_time_reservation_alt
            cls._TYPE_SUPPORT = module.type_support_msg__msg__flexible_time_reservation_alt
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__flexible_time_reservation_alt

            from builtin_interfaces.msg import Duration
            if Duration.__class__._TYPE_SUPPORT is None:
                Duration.__class__.__import_type_support__()

            from rmf_reservation_msgs.msg import StartTimeRange
            if StartTimeRange.__class__._TYPE_SUPPORT is None:
                StartTimeRange.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class FlexibleTimeReservationAlt(metaclass=Metaclass_FlexibleTimeReservationAlt):
    """Message class 'FlexibleTimeReservationAlt'."""

    __slots__ = [
        '_resource_name',
        '_cost',
        '_start_time',
        '_has_end',
        '_duration',
        '_check_fields',
    ]

    _fields_and_field_types = {
        'resource_name': 'string',
        'cost': 'double',
        'start_time': 'rmf_reservation_msgs/StartTimeRange',
        'has_end': 'boolean',
        'duration': 'builtin_interfaces/Duration',
    }

    # This attribute is used to store an rosidl_parser.definition variable
    # related to the data type of each of the components the message.
    SLOT_TYPES = (
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['rmf_reservation_msgs', 'msg'], 'StartTimeRange'),  # noqa: E501
        rosidl_parser.definition.BasicType('boolean'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['builtin_interfaces', 'msg'], 'Duration'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        if 'check_fields' in kwargs:
            self._check_fields = kwargs['check_fields']
        else:
            self._check_fields = ros_python_check_fields == '1'
        if self._check_fields:
            assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
                'Invalid arguments passed to constructor: %s' % \
                ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.resource_name = kwargs.get('resource_name', str())
        self.cost = kwargs.get('cost', float())
        from rmf_reservation_msgs.msg import StartTimeRange
        self.start_time = kwargs.get('start_time', StartTimeRange())
        self.has_end = kwargs.get('has_end', bool())
        from builtin_interfaces.msg import Duration
        self.duration = kwargs.get('duration', Duration())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.get_fields_and_field_types().keys(), self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    if self._check_fields:
                        assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.resource_name != other.resource_name:
            return False
        if self.cost != other.cost:
            return False
        if self.start_time != other.start_time:
            return False
        if self.has_end != other.has_end:
            return False
        if self.duration != other.duration:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @builtins.property
    def resource_name(self):
        """Message field 'resource_name'."""
        return self._resource_name

    @resource_name.setter
    def resource_name(self, value):
        if self._check_fields:
            assert \
                isinstance(value, str), \
                "The 'resource_name' field must be of type 'str'"
        self._resource_name = value

    @builtins.property
    def cost(self):
        """Message field 'cost'."""
        return self._cost

    @cost.setter
    def cost(self, value):
        if self._check_fields:
            assert \
                isinstance(value, float), \
                "The 'cost' field must be of type 'float'"
            assert not (value < -1.7976931348623157e+308 or value > 1.7976931348623157e+308) or math.isinf(value), \
                "The 'cost' field must be a double in [-1.7976931348623157e+308, 1.7976931348623157e+308]"
        self._cost = value

    @builtins.property
    def start_time(self):
        """Message field 'start_time'."""
        return self._start_time

    @start_time.setter
    def start_time(self, value):
        if self._check_fields:
            from rmf_reservation_msgs.msg import StartTimeRange
            assert \
                isinstance(value, StartTimeRange), \
                "The 'start_time' field must be a sub message of type 'StartTimeRange'"
        self._start_time = value

    @builtins.property
    def has_end(self):
        """Message field 'has_end'."""
        return self._has_end

    @has_end.setter
    def has_end(self, value):
        if self._check_fields:
            assert \
                isinstance(value, bool), \
                "The 'has_end' field must be of type 'bool'"
        self._has_end = value

    @builtins.property
    def duration(self):
        """Message field 'duration'."""
        return self._duration

    @duration.setter
    def duration(self, value):
        if self._check_fields:
            from builtin_interfaces.msg import Duration
            assert \
                isinstance(value, Duration), \
                "The 'duration' field must be a sub message of type 'Duration'"
        self._duration = value
