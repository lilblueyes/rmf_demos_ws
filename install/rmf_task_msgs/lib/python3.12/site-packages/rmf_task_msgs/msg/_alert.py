# generated from rosidl_generator_py/resource/_idl.py.em
# with input from rmf_task_msgs:msg/Alert.idl
# generated code does not contain a copyright notice

# This is being done at the module level and not on the instance level to avoid looking
# for the same variable multiple times on each instance. This variable is not supposed to
# change during runtime so it makes sense to only look for it once.
from os import getenv

ros_python_check_fields = getenv('ROS_PYTHON_CHECK_FIELDS', default='')


# Import statements for member types

import builtins  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_Alert(type):
    """Metaclass of message 'Alert'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
        'TIER_INFO': 0,
        'TIER_WARNING': 1,
        'TIER_ERROR': 2,
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('rmf_task_msgs')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'rmf_task_msgs.msg.Alert')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__alert
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__alert
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__alert
            cls._TYPE_SUPPORT = module.type_support_msg__msg__alert
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__alert

            from rmf_task_msgs.msg import AlertParameter
            if AlertParameter.__class__._TYPE_SUPPORT is None:
                AlertParameter.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
            'TIER_INFO': cls.__constants['TIER_INFO'],
            'TIER_WARNING': cls.__constants['TIER_WARNING'],
            'TIER_ERROR': cls.__constants['TIER_ERROR'],
            'DISPLAY__DEFAULT': True,
        }

    @property
    def TIER_INFO(self):
        """Message constant 'TIER_INFO'."""
        return Metaclass_Alert.__constants['TIER_INFO']

    @property
    def TIER_WARNING(self):
        """Message constant 'TIER_WARNING'."""
        return Metaclass_Alert.__constants['TIER_WARNING']

    @property
    def TIER_ERROR(self):
        """Message constant 'TIER_ERROR'."""
        return Metaclass_Alert.__constants['TIER_ERROR']

    @property
    def DISPLAY__DEFAULT(cls):
        """Return default value for message field 'display'."""
        return True


class Alert(metaclass=Metaclass_Alert):
    """
    Message class 'Alert'.

    Constants:
      TIER_INFO
      TIER_WARNING
      TIER_ERROR
    """

    __slots__ = [
        '_id',
        '_title',
        '_subtitle',
        '_message',
        '_display',
        '_tier',
        '_responses_available',
        '_alert_parameters',
        '_task_id',
        '_check_fields',
    ]

    _fields_and_field_types = {
        'id': 'string',
        'title': 'string',
        'subtitle': 'string',
        'message': 'string',
        'display': 'boolean',
        'tier': 'uint8',
        'responses_available': 'sequence<string>',
        'alert_parameters': 'sequence<rmf_task_msgs/AlertParameter>',
        'task_id': 'string',
    }

    # This attribute is used to store an rosidl_parser.definition variable
    # related to the data type of each of the components the message.
    SLOT_TYPES = (
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
        rosidl_parser.definition.BasicType('boolean'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.UnboundedString()),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['rmf_task_msgs', 'msg'], 'AlertParameter')),  # noqa: E501
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
    )

    def __init__(self, **kwargs):
        if 'check_fields' in kwargs:
            self._check_fields = kwargs['check_fields']
        else:
            self._check_fields = ros_python_check_fields == '1'
        if self._check_fields:
            assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
                'Invalid arguments passed to constructor: %s' % \
                ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.id = kwargs.get('id', str())
        self.title = kwargs.get('title', str())
        self.subtitle = kwargs.get('subtitle', str())
        self.message = kwargs.get('message', str())
        self.display = kwargs.get(
            'display', Alert.DISPLAY__DEFAULT)
        self.tier = kwargs.get('tier', int())
        self.responses_available = kwargs.get('responses_available', [])
        self.alert_parameters = kwargs.get('alert_parameters', [])
        self.task_id = kwargs.get('task_id', str())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.get_fields_and_field_types().keys(), self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    if self._check_fields:
                        assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.id != other.id:
            return False
        if self.title != other.title:
            return False
        if self.subtitle != other.subtitle:
            return False
        if self.message != other.message:
            return False
        if self.display != other.display:
            return False
        if self.tier != other.tier:
            return False
        if self.responses_available != other.responses_available:
            return False
        if self.alert_parameters != other.alert_parameters:
            return False
        if self.task_id != other.task_id:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @builtins.property  # noqa: A003
    def id(self):  # noqa: A003
        """Message field 'id'."""
        return self._id

    @id.setter  # noqa: A003
    def id(self, value):  # noqa: A003
        if self._check_fields:
            assert \
                isinstance(value, str), \
                "The 'id' field must be of type 'str'"
        self._id = value

    @builtins.property
    def title(self):
        """Message field 'title'."""
        return self._title

    @title.setter
    def title(self, value):
        if self._check_fields:
            assert \
                isinstance(value, str), \
                "The 'title' field must be of type 'str'"
        self._title = value

    @builtins.property
    def subtitle(self):
        """Message field 'subtitle'."""
        return self._subtitle

    @subtitle.setter
    def subtitle(self, value):
        if self._check_fields:
            assert \
                isinstance(value, str), \
                "The 'subtitle' field must be of type 'str'"
        self._subtitle = value

    @builtins.property
    def message(self):
        """Message field 'message'."""
        return self._message

    @message.setter
    def message(self, value):
        if self._check_fields:
            assert \
                isinstance(value, str), \
                "The 'message' field must be of type 'str'"
        self._message = value

    @builtins.property
    def display(self):
        """Message field 'display'."""
        return self._display

    @display.setter
    def display(self, value):
        if self._check_fields:
            assert \
                isinstance(value, bool), \
                "The 'display' field must be of type 'bool'"
        self._display = value

    @builtins.property
    def tier(self):
        """Message field 'tier'."""
        return self._tier

    @tier.setter
    def tier(self, value):
        if self._check_fields:
            assert \
                isinstance(value, int), \
                "The 'tier' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'tier' field must be an unsigned integer in [0, 255]"
        self._tier = value

    @builtins.property
    def responses_available(self):
        """Message field 'responses_available'."""
        return self._responses_available

    @responses_available.setter
    def responses_available(self, value):
        if self._check_fields:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, str) for v in value) and
                 True), \
                "The 'responses_available' field must be a set or sequence and each value of type 'str'"
        self._responses_available = value

    @builtins.property
    def alert_parameters(self):
        """Message field 'alert_parameters'."""
        return self._alert_parameters

    @alert_parameters.setter
    def alert_parameters(self, value):
        if self._check_fields:
            from rmf_task_msgs.msg import AlertParameter
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, AlertParameter) for v in value) and
                 True), \
                "The 'alert_parameters' field must be a set or sequence and each value of type 'AlertParameter'"
        self._alert_parameters = value

    @builtins.property
    def task_id(self):
        """Message field 'task_id'."""
        return self._task_id

    @task_id.setter
    def task_id(self, value):
        if self._check_fields:
            assert \
                isinstance(value, str), \
                "The 'task_id' field must be of type 'str'"
        self._task_id = value
